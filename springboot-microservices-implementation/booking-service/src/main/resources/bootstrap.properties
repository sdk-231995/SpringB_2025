spring.cloud.config.uri=http://localhost:8888

spring.cloud.config.profile=dev
#spring.datasource.username=root
#spring.datasource.password=
#below property will help booking Service to register with booking-service as name on to the Discovery service
spring.application.name=booking-service
#below property will make sure to allocate available port dynamically on run time if booking-service has multiple running instance
server.port=0
#below property will generate a random name for each instance of booking-service and than register to the Discovery service
eureka.instance.instance-id=${spring.application.name}:${random.uuid}

#Configuration for the Vault connection
spring.cloud.vault.paths=secret/booking-service
spring.cloud.vault.host=localhost
spring.cloud.vault.port=8200
spring.cloud.vault.scheme=http
spring.cloud.vault.authentication=TOKEN
spring.cloud.vault.token=00000000-0000-0000-0000-000000000000
spring.cloud.vault.application-name=booking-service

#RabbitMQ config
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

#do not do loadbalancing as it will be taken care by Eureka server and FeignClient
spring.cloud.loadbalancer.ribbon.enabled=false

spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:9090/auth/realms/mycompany-microservices-realm
