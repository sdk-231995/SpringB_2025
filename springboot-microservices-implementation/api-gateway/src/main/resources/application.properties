spring.application.name=api-gateway

#below property is equivalent to @EnableEurekaClient, it helps API Gateway to register itself on Eureka Discovery service
spring.cloud.gateway.discovery.locator.enabled=true

#below property tells API gateway to work in a load balanced mode or not
spring.cloud.loadbalancer.ribbon.enabled=false

#below property helps to provide the uri in small letters for spring.cloud.gateway.routes[0].uri
#spring.cloud.gateway.discovery.locator.lower-case-service-id=true

spring.cloud.gateway.routes[0].id=product-service
spring.cloud.gateway.routes[0].uri=lb://PRODUCT-SERVICE
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/products/**
#spring.cloud.gateway.routes[0].predicates[1]=Path=/api/categories

spring.cloud.gateway.routes[1].id=booking-service
spring.cloud.gateway.routes[1].uri=lb://BOOKING-SERVICE
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/bookings/**

#Enable token relay- Pass the successful authenticated token from Keycloak server to downstream API's
spring.cloud.gateway.default-filters=TokenRelay

eureka.instance.instance-id=${spring.application.name}:${random.uuid}

#configuration for connecting to keycloak server
spring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:9090/auth/realms/mycompany-microservices-realm
spring.security.oauth2.client.registration.spring-cloud-gateway-client.client-id=spring-cloud-gateway-client
spring.security.oauth2.client.registration.spring-cloud-gateway-client.client-secret=8221591c-f144-4bd1-a351-bc842461aee4
spring.security.oauth2.client.registration.spring-cloud-gateway-client.provider=keycloak
spring.security.oauth2.client.registration.spring-cloud-gateway-client.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.spring-cloud-gateway-client.redirect-uri=http://localhost:8080/login/oauth2/code/spring-cloud-gateway-client
